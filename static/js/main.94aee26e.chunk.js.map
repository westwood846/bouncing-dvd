{"version":3,"sources":["DVD.js","serviceWorker.js","index.js"],"names":["DVD","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colors","state","left","top","width","height","velocity","x","y","windowWidth","windowHeight","color","randomColor","updatePosition","bind","assertThisInitialized","updateWindowDimensions","_this2","interval","setInterval","window","addEventListener","clearInterval","removeEventListener","console","log","setState","innerWidth","innerHeight","Math","floor","random","length","style","svgStyle","fill","react_default","a","createElement","className","d","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_DVD_0","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.94aee26e.chunk.js","sourcesContent":["import React from 'react';\nimport './DVD.css';\n\nclass DVD extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      left: 100,\n      top: 200,\n      width: 153,\n      height: 69,\n      velocity: {x: 1, y: 1},\n      windowWidth: 0,\n      windowHeight: 0,\n      color: this.randomColor()\n    }\n\n    this.updatePosition = this.updatePosition.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n  \n  componentDidMount() {\n    this.interval = setInterval(() => this.updatePosition(), 10);\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updatePosition() {\n    console.log(\"updating position\")\n    this.setState({\n      left: this.state.left + this.state.velocity.x,\n      top: this.state.top + this.state.velocity.y,\n    });\n    if (\n      this.state.left + this.state.width >= this.state.windowWidth\n      || this.state.left <= 0\n    ) this.setState({color: this.randomColor(), velocity: {x: this.state.velocity.x * -1, y: this.state.velocity.y}});\n    if (\n      this.state.top + this.state.height >= this.state.windowHeight\n      || this.state.top <= 0\n    ) this.setState({color: this.randomColor(), velocity: {x: this.state.velocity.x, y: this.state.velocity.y * -1}});\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight\n    });\n  }\n\n  colors = [\n    \"#f44336\", \"#9c27b0\", \"#2196f3\", \"#4caf50\", \"#ffeb3b\"\n  ]\n\n  randomColor() {\n    return this.colors[Math.floor(Math.random() * this.colors.length)];\n  }\n\n  render() {\n    let style = {\n      left: this.state.left + \"px\",\n      top: this.state.top + \"px\",\n      width: this.state.width + \"px\",\n      height: this.state.height + \"px\"\n    }\n    let svgStyle = {\n      fill: this.state.color\n    }\n    return (\n      <div className=\"DVD\" style={style}>\n        <svg width=\"153px\" height=\"69px\"><g><path style={svgStyle} d=\"M140.186,63.52h-1.695l-0.692,5.236h-0.847l0.77-5.236h-1.693l0.076-0.694h4.158L140.186,63.52L140.186,63.52z M146.346,68.756h-0.848v-4.545l0,0l-2.389,4.545l-1-4.545l0,0l-1.462,4.545h-0.771l1.924-5.931h0.695l0.924,4.006l2.078-4.006 h0.848V68.756L146.346,68.756z M126.027,0.063H95.352c0,0-8.129,9.592-9.654,11.434c-8.064,9.715-9.523,12.32-9.779,13.02 c0.063-0.699-0.256-3.304-3.686-13.148C71.282,8.7,68.359,0.062,68.359,0.062H57.881V0L32.35,0.063H13.169l-1.97,8.131 l14.543,0.062h3.365c9.336,0,15.055,3.747,13.467,10.354c-1.717,7.24-9.91,10.416-18.545,10.416h-3.24l4.191-17.783H10.502 L4.34,37.219h20.578c15.432,0,30.168-8.13,32.709-18.608c0.508-1.906,0.443-6.67-0.764-9.527c0-0.127-0.063-0.191-0.127-0.444 c-0.064-0.063-0.127-0.509,0.127-0.571c0.128-0.062,0.383,0.189,0.445,0.254c0.127,0.317,0.19,0.57,0.19,0.57l13.083,36.965 l33.344-37.6h14.1h3.365c9.337,0,15.055,3.747,13.528,10.354c-1.778,7.24-9.972,10.416-18.608,10.416h-3.238l4.191-17.783h-14.481 l-6.159,25.976h20.576c15.434,0,30.232-8.13,32.709-18.608C152.449,8.193,141.523,0.063,126.027,0.063L126.027,0.063z M71.091,45.981c-39.123,0-70.816,4.512-70.816,10.035c0,5.59,31.693,10.034,70.816,10.034c39.121,0,70.877-4.444,70.877-10.034 C141.968,50.493,110.212,45.981,71.091,45.981L71.091,45.981z M68.55,59.573c-8.956,0-16.196-1.523-16.196-3.365 c0-1.84,7.239-3.303,16.196-3.303c8.955,0,16.195,1.463,16.195,3.303C84.745,58.05,77.505,59.573,68.55,59.573L68.55,59.573z\"/></g></svg>\n      </div>\n    )\n  }\n}\n\nexport default DVD;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DVD from './DVD';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DVD />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}